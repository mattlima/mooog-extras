(function(){var a,b=function(a,b){return function(){return a.apply(b,arguments)}},c=function(a,b){function c(){this.constructor=a}for(var e in b)d.call(b,e)&&(a[e]=b[e]);return c.prototype=b.prototype,a.prototype=new c,a.__super__=b.prototype,a},d={}.hasOwnProperty;a=function(a){function d(a){this.noise=b(this.noise,this),this.square=b(this.square,this),this.triangle=b(this.triangle,this),this.sine=b(this.sine,this),d.__super__.constructor.apply(this,arguments)}return c(d,a),d.prototype.before_config=function(a){var b;return Object.defineProperty(this,"type",{get:function(){return this.__type},set:function(a){return function(b){return a.__type=b,"sawtooth"===b&&(a.duty_cycle=1),"triangle"===b&&(a.duty_cycle=.5),"square"===b&&(a.duty_cycle=.5),a.onaudioprocess=a[b]}}(this),enumerable:!0,configurable:!0}),b=this.context.createScriptProcessor(null,0,1),this.insert_node(b,0),this.last=0,this.frequency=440,this.dc=0,this.phase=0,this.duty_cycle=.5,this.tau=2*Math.PI,this.b=.1},d.prototype.after_config=function(a){return null==this.type&&(this.type="sine"),this.sample_rate=this._instance.context.sampleRate,this.secs_per_sample=1/this.sample_rate},d.prototype.sine=function(a){var b,c,d,e,f,g,h,i,j,k,l,m;for(i=a.outputBuffer,f=i.length,h=2*this.secs_per_sample*Math.PI*this.frequency,b=d=0,l=i.numberOfChannels-1;l>=0?l>=d:d>=l;b=l>=0?++d:--d)for(j=i.getChannelData(b),c=e=0,g=j.length;g>e;c=++e)m=j[c],k=Math.sin(this.phase),this.phase=this.phase+h,j[c]=k;return null},d.prototype.triangle=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;for(i=a.outputBuffer,f=i.length,h=this.secs_per_sample*this.tau*this.frequency,b=d=0,n=i.numberOfChannels-1;n>=0?n>=d:d>=n;b=n>=0?++d:--d)for(j=i.getChannelData(b),c=e=0,g=j.length;g>e;c=++e)o=j[c],l=this.phase%this.tau/this.tau,l<this.duty_cycle?(k=l/this.duty_cycle,m=2*k-1):(k=(l-this.duty_cycle)/(1-this.duty_cycle),m=2*(1-k)-1),this.phase=this.phase+h,j[c]=m;return null},d.prototype.sawtooth=d.prototype.triangle,d.prototype.square=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;for(j=a.outputBuffer,f=j.length,i=this.secs_per_sample*this.tau*this.frequency,b=d=0,n=j.numberOfChannels-1;n>=0?n>=d:d>=n;b=n>=0?++d:--d)for(k=j.getChannelData(b),c=e=0,g=k.length;g>e;c=++e)o=k[c],l=this.phase%this.tau/this.tau,l<=this.duty_cycle?(h=l/this.duty_cycle,m=-1-.2*Math.cos(h*this.tau*this.frequency*this.b)*Math.pow(2*Math.abs(h-.5),3)):l>=this.duty_cycle&&(h=(l-this.duty_cycle)/(1-this.duty_cycle),m=1+.2*Math.cos(h*this.tau*this.frequency*this.b)*Math.pow(2*Math.abs(h-.5),3)),this.phase=this.phase+i,k[c]=m;return null},d.prototype.noise=function(a){var b,c,d,e,f,g,h,i,j;for(h=a.outputBuffer,f=h.length,b=d=0,j=h.numberOfChannels-1;j>=0?j>=d:d>=j;b=j>=0?++d:--d)for(i=h.getChannelData(b),c=e=0,g=i.length;g>e;c=++e)b=i[c],i[c]=Math.random()+this.dc;return null},d}(Mooog.MooogAudioNode),Mooog.extend_with("ImprovedOscillator",a)}).call(this);